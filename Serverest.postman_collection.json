{
	"info": {
		"_postman_id": "30763e4e-c326-4b98-9945-d7ada56fd04a",
		"name": "API Serverest",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "20823789"
	},
	"item": [
		{
			"name": "/usuários",
			"item": [
				{
					"name": "Testes positivos",
					"item": [
						{
							"name": "Informações de usuários",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "Informações de usuários _Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios/2rY2hwi5ZOMbd7tT"
							},
							"response": []
						},
						{
							"name": "Cadastrar usuários Adm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"\r",
											"})\r",
											"\r",
											"// Validação de atributos (presença)\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"   pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(response[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseURL = pm.environment.get('baseURL');\r",
											"const nome = pm.variables.replaceIn('{{$randomFristName}}');\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}');\r",
											"const password = \"teste\"\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${baseURL}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mone\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, (err,res) => {\r",
											"    console.log(err ? err : res.json());\r",
											"\r",
											"    try {\r",
											"        pm.environment.set('email_usuario',email)\r",
											"    }\r",
											"        catch {\r",
											"            console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "Cadastrar usuários comum",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"//console.log(response)\r",
											"\r",
											"\r",
											"//pm.test(\"Status code is 201\", function () {\r",
											"    //pm.response.to.have.status(201);\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"   pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"//});\r",
											"\r",
											"// Validação de atributos (presença)\r",
											"//const atributos = ['message', '_id']\r",
											"\r",
											"//atributos.forEach((atributo) => {\r",
											"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
											"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
											" //   })\r",
											"\r",
											"//})\r",
											"\r",
											"//pm.test('Resposta contém atributo \"_id\"', () => {\r",
											"        //pm.expect(response[\"_id\"]).to.exist\r",
											"\r",
											"//})\r",
											"\r",
											"//pm.test('Resposta contém atributo \"message\"', () => {\r",
											"        //pm.expect(response[\"message\"]).to.exist\r",
											"\r",
											"//})\r",
											"\r",
											"//Validação de atributos (conteúdo)\r",
											"\r",
											"//pm.test('Resposta correta retrona', () => {\r",
											"        //pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
											"\r",
											"//})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseURL = pm.environment.get('baseURL');\r",
											"const nome = pm.variables.replaceIn('{{$randomFristName}}');\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}');\r",
											"const password = \"teste\"\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${baseURL}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mone\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"false\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, (err,res) => {\r",
											"    console.log(err ? err : res.json());\r",
											"\r",
											"    try {\r",
											"        pm.environment.set('email_usuario',email)\r",
											"    }\r",
											"        catch {\r",
											"            console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"false\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "Alterar usuários",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//const response = pm.response.json()\r",
											"//console.log(response)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"})\r",
											"//pm.test(\"Body matches string\", function () {\r",
											"   //pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"//});\r",
											"//});\r",
											"\r",
											"// Validação de atributos (presença)\r",
											"//const atributos = ['message', '_id']\r",
											"\r",
											"//atributos.forEach((atributo) => {\r",
											"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
											"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
											" //   })\r",
											"\r",
											"//})\r",
											"\r",
											"//pm.test('Resposta contém atributo \"_id\"', () => {\r",
											"        //pm.expect(response[\"_id\"]).to.exist\r",
											"\r",
											"//})\r",
											"\r",
											"//pm.test('Resposta contém atributo \"message\"', () => {\r",
											"        //pm.expect(response[\"message\"]).to.exist\r",
											"\r",
											"//})\r",
											"\r",
											"//Validação de atributos (conteúdo)\r",
											"\r",
											"//pm.test('Resposta correta retrona', () => {\r",
											"        //pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
											"\r",
											"//})\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const baseURL = pm.environment.get('baseURL');\r",
											"const nome = pm.variables.replaceIn('{{$randomFullName}}');\r",
											"const email = pm.variables.replaceIn('{{$randomEmail}}');\r",
											"const password = \"teste\"\r",
											"\r",
											"const postRequest = {\r",
											"    url: `${baseURL}/usuarios`,\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"mone\": nome,\r",
											"            \"email\": email,\r",
											"            \"password\": password,\r",
											"            \"administrador\": \"true\"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postRequest, (err,res) => {\r",
											"    console.log(err ? err : res.json());\r",
											"\r",
											"    try {\r",
											"        pm.environment.set('email_usuario',email)\r",
											"    }\r",
											"        catch {\r",
											"            console.warn('FAIL')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios/2rY2hwi5ZOMbd7tT"
							},
							"response": []
						},
						{
							"name": "Delete usuários",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//const response = pm.response.json()\r",
											"//console.log(response)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"})\r",
											"//pm.test(\"Body matches string\", function () {\r",
											"   //pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"//});\r",
											"//});\r",
											"\r",
											"// Validação de atributos (presença)\r",
											"//const atributos = ['message', '_id']\r",
											"\r",
											"//atributos.forEach((atributo) => {\r",
											"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
											"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
											" //   })\r",
											"\r",
											"//})\r",
											"\r",
											"//pm.test('Resposta contém atributo \"_id\"', () => {\r",
											"        //pm.expect(response[\"_id\"]).to.exist\r",
											"\r",
											"//})\r",
											"\r",
											"//pm.test('Resposta contém atributo \"message\"', () => {\r",
											"        //pm.expect(response[\"message\"]).to.exist\r",
											"\r",
											"//})\r",
											"\r",
											"//Validação de atributos (conteúdo)\r",
											"\r",
											"//pm.test('Resposta correta retrona', () => {\r",
											"        //pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
											"\r",
											"//})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios/0uxuPY0cbmQhpEz1"
							},
							"response": []
						}
					]
				},
				{
					"name": "Testes negativos",
					"item": [
						{
							"name": "Informações de usuários _Id errado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios/0uxuPY0cbmQhp123"
							},
							"response": []
						},
						{
							"name": "Email já cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"//pm.test(\"Body matches string\", function () {\r",
											"   //pm.expect(pm.response.text()).to.include(\"este email já está sendo usado\");\r",
											"//});\r",
											"});\r",
											"\r",
											"// Validação de atributos (presença)\r",
											"//const atributos = ['message', '_id']\r",
											"\r",
											"//atributos.forEach((atributo) => {\r",
											"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
											"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
											" //   })\r",
											"\r",
											"//})\r",
											"\r",
											"//pm.test('Resposta contém atributo \"_id\"', () => {\r",
											"        //pm.expect(response[\"_id\"]).to.exist\r",
											"\r",
											"//})\r",
											"\r",
											"//pm.test('Resposta contém atributo \"message\"', () => {\r",
											"        //pm.expect(response[\"message\"]).to.exist\r",
											"\r",
											"//})\r",
											"\r",
											"//Validação de atributos (conteúdo)\r",
											"\r",
											"//pm.test('Resposta correta retrona', () => {\r",
											"        //pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
											"\r",
											"//})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Fulano da Silva\",\r\n  \"email\": \"fulano@qa.com\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "Email em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"//pm.test(\"Body matches string\", function () {\r",
											"   //pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"//});\r",
											"});\r",
											"\r",
											"// Validação de atributos (presença)\r",
											"//const atributos = ['message', '_id']\r",
											"\r",
											"//atributos.forEach((atributo) => {\r",
											"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
											"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
											" //   })\r",
											"\r",
											"//})\r",
											"\r",
											"//pm.test('Resposta contém atributo \"_id\"', () => {\r",
											"        //pm.expect(response[\"_id\"]).to.exist\r",
											"\r",
											"//})\r",
											"\r",
											"//pm.test('Resposta contém atributo \"message\"', () => {\r",
											"        //pm.expect(response[\"message\"]).to.exist\r",
											"\r",
											"//})\r",
											"\r",
											"//Validação de atributos (conteúdo)\r",
											"\r",
											"//pm.test('Resposta correta retrona', () => {\r",
											"        //pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
											"\r",
											"//})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Fulano da Silva\",\r\n  \"email\": \"\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "Nome em branco",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"console.log(response)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"\r",
											"//pm.test(\"Body matches string\", function () {\r",
											"   //pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});\r",
											"\r",
											"// Validação de atributos (presença)\r",
											"//const atributos = ['message', '_id']\r",
											"\r",
											"//atributos.forEach((atributo) => {\r",
											"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
											"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
											" //   })\r",
											"\r",
											"//})\r",
											"\r",
											"//pm.test('Resposta contém atributo \"_id\"', () => {\r",
											"       // pm.expect(response[\"_id\"]).to.exist\r",
											"\r",
											"//})\r",
											"\r",
											"//        pm.expect(response[\"message\"]).to.exist\r",
											"\r",
											"//})\r",
											"\r",
											"//Validação de atributos (conteúdo)\r",
											"\r",
											"//pm.test('Resposta correta retrona', () => {\r",
											"       // pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
											"\r",
											"//})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"fulano@qa.com\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios"
							},
							"response": []
						},
						{
							"name": "Delete usuários C/ carrinho",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//const response = pm.response.json()\r",
											"//console.log(response)\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"pm.response.to.have.status(200);\r",
											"})\r",
											"//pm.test(\"Body matches string\", function () {\r",
											"   //pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"//});\r",
											"//});\r",
											"\r",
											"// Validação de atributos (presença)\r",
											"//const atributos = ['message', '_id']\r",
											"\r",
											"//atributos.forEach((atributo) => {\r",
											"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
											"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
											" //   })\r",
											"\r",
											"//})\r",
											"\r",
											"//pm.test('Resposta contém atributo \"_id\"', () => {\r",
											"        //pm.expect(response[\"_id\"]).to.exist\r",
											"\r",
											"//})\r",
											"\r",
											"//pm.test('Resposta contém atributo \"message\"', () => {\r",
											"        //pm.expect(response[\"message\"]).to.exist\r",
											"\r",
											"//})\r",
											"\r",
											"//Validação de atributos (conteúdo)\r",
											"\r",
											"//pm.test('Resposta correta retrona', () => {\r",
											"        //pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
											"\r",
											"//})\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/usuarios/0uxuPY0cbmQhpEz1"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "/login",
			"item": [
				{
					"name": "Testes negativos",
					"item": [
						{
							"name": "Login senha errada",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailValido}}\",\r\n    \"password\": \"{{senhaErrada}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						},
						{
							"name": "Login email errado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailErrado}}\",\r\n    \"password\": \"{{senhaValida}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						},
						{
							"name": "Login email  vazio",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailVazio}}\",\r\n    \"password\": \"{{senhaValida}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						},
						{
							"name": "Login senha  vazia",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailValido}}\",\r\n    \"password\": \"{{senhaVazia}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						}
					]
				},
				{
					"name": "Testes positivos",
					"item": [
						{
							"name": "Login com sucesso",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json()\r",
											"\r",
											"pm.environment.set(\"token\", response.authorization.slice(7));"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{emailValido}}\",\r\n    \"password\": \"{{senhaValida}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/login"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "/produtos",
			"item": [
				{
					"name": "Testes negativos",
					"item": [
						{
							"name": "Cadastrar novos produtos erro",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$random}}\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"{{$randomProductmaterial}}\",\r\n  \"quantidade\": 15\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos"
							},
							"response": []
						},
						{
							"name": "Produto já cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 382\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos"
							},
							"response": []
						},
						{
							"name": "Cadastrado apenas adm",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Logitech MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 382\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos"
							},
							"response": []
						},
						{
							"name": "Produto não encontrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/produtos/BeeJh5lz3k6k1234"
							},
							"response": []
						},
						{
							"name": "Editar produto já cadastrado",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Generic Wooden Keyboard\",\r\n  \"preco\": 10,\r\n  \"descricao\": \"Frozen\",\r\n  \"quantidade\": 15\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos/3OB5gpsdVFl3uXaz"
							},
							"response": []
						}
					]
				},
				{
					"name": "Testes positivos",
					"item": [
						{
							"name": "Produtos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/produtos"
							},
							"response": []
						},
						{
							"name": "Busca de Produto _Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/produtos/BeeJh5lz3k6kSIzA"
							},
							"response": []
						},
						{
							"name": "Cadastrar novos produtos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseURL')\r",
											"\r",
											"\r",
											"const postrequest = {\r",
											"    url: `${url}/login`, //variável\r",
											"    method: 'post',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json'\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"email\": \"Fulano da Silva\",\r",
											"            \"password\": \"fulano@qa.com\"\r",
											"\r",
											"        })\r",
											"    }\r",
											"}\r",
											"\r",
											"pm.sendRequest(postrequest, (err, response) => {\r",
											"    const res = response.json()\r",
											"    console.log(err ? err: res);\r",
											"\r",
											"    try {\r",
											"        // operação\r",
											"        pm.environment.set('token',res.authorization.slice(7))\r",
											"        console.log(res.authorization.slice(7))\r",
											"\r",
											"        \r",
											"        } catch {\r",
											"            //operação\r",
											"            console.warn('FAIL')\r",
											"\r",
											"        }\r",
											"    \r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": 10,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 15\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos"
							},
							"response": []
						},
						{
							"name": "Delete de produtos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "DELETE",
								"header": [],
								"url": "{{baseURL}}/produtos/3OB5gpsdVFl3uXaz"
							},
							"response": []
						},
						{
							"name": "Editar produto",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\": \"Generic Teste Wooden Keyboard\",\r\n  \"preco\": 10,\r\n  \"descricao\": \"Frozen\",\r\n  \"quantidade\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/produtos/3OB5gpsdVFl3uXaz"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "/carrinhos",
			"item": [
				{
					"name": "testes com sucesso",
					"item": [
						{
							"name": "Lista de carrinhos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": "{{baseURL}}/carrinhos"
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinhos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "33ajdr37KRkJC6Hf",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n       \"quantidade\": 2\r\n    },\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n       \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/carrinhos"
							},
							"response": []
						},
						{
							"name": "Buscar carrinhos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "33ajdr37KRkJC6Hf",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n       \"quantidade\": 2\r\n    },\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n       \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/carrinhos/OuYbaKV2ztlVp23x"
							},
							"response": []
						},
						{
							"name": "Concluir compra Excluir carrinho",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "33ajdr37KRkJC6Hf",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/carrinhos/concluir-compra"
							},
							"response": []
						},
						{
							"name": "Concluir compra Cancelar carrinho Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "33ajdr37KRkJC6Hf",
										"type": "text"
									}
								],
								"url": "{{baseURL}}/carrinhos/cancelar-compra"
							},
							"response": []
						}
					]
				},
				{
					"name": "testes negativos",
					"item": [
						{
							"name": "New Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{token}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    },\r\n    {\r\n      \"idProduto\": \"YaeJ455lz3k6kSIzA\",\r\n      \"quantidade\": 3\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseURL}}/carrinhos"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Fluxo de compra",
			"item": [
				{
					"name": "Cadastrar usuários",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const baseURL = pm.environment.get('baseURL');\r",
									"const nome = pm.variables.replaceIn('{{$randomFristName}}');\r",
									"const email = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"const password = \"teste\"\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${baseURL}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"mone\": nome,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": \"false\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, (err,res) => {\r",
									"    console.log(err ? err : res.json());\r",
									"\r",
									"    try {\r",
									"        pm.environment.set('email_usuario',email)\r",
									"    }\r",
									"        catch {\r",
									"            console.warn('FAIL')\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"   pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"});\r",
									"\r",
									"// Validação de atributos (presença)\r",
									"//const atributos = ['message', '_id']\r",
									"\r",
									"//atributos.forEach((atributo) => {\r",
									"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
									"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
									" //   })\r",
									"\r",
									"//})\r",
									"\r",
									"pm.test('Resposta contém atributo \"_id\"', () => {\r",
									"        pm.expect(response[\"_id\"]).to.exist\r",
									"\r",
									"})\r",
									"\r",
									"pm.test('Resposta contém atributo \"message\"', () => {\r",
									"        pm.expect(response[\"message\"]).to.exist\r",
									"\r",
									"})\r",
									"\r",
									"//Validação de atributos (conteúdo)\r",
									"\r",
									"pm.test('Resposta correta retrona', () => {\r",
									"        pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/usuarios"
					},
					"response": []
				},
				{
					"name": "Realizar login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"pm.environment.set(\"token\", response.authorization.slice(7));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailValido}}\",\r\n    \"password\": \"{{senhaValida}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Cadastrar produto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const postrequest = {\r",
									"    url: `${url}/login`, //variável\r",
									"    method: 'post',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\": \"Fulano da Silva\",\r",
									"            \"password\": \"fulano@qa.com\"\r",
									"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postrequest, (err, response) => {\r",
									"    console.log(err ? err: response.json());\r",
									"\r",
									"    try {\r",
									"        // operação\r",
									"        pm.environment.set('token',response.json().authorization.slice(7))\r",
									"        console.log(response.json().authorization.slice(7))\r",
									"\r",
									"        \r",
									"        } catch {\r",
									"            //operação\r",
									"            console.warn('FAIL')\r",
									"\r",
									"        }\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": 10,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 15\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/produtos"
					},
					"response": []
				},
				{
					"name": "Cadastrar carrinho",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "DJI4CF60atislPyR",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n       \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/carrinhos"
					},
					"response": []
				},
				{
					"name": "Excluir carrinho (concluir compra)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "DJI4CF60atislPyR",
								"type": "text"
							}
						],
						"url": "{{baseURL}}/carrinhos/concluir-compra"
					},
					"response": []
				}
			]
		},
		{
			"name": "Fluxo compra cancelada",
			"item": [
				{
					"name": "Cadastrar usuários",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"   pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"});\r",
									"\r",
									"// Validação de atributos (presença)\r",
									"//const atributos = ['message', '_id']\r",
									"\r",
									"//atributos.forEach((atributo) => {\r",
									"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
									"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
									" //   })\r",
									"\r",
									"//})\r",
									"\r",
									"pm.test('Resposta contém atributo \"_id\"', () => {\r",
									"        pm.expect(response[\"_id\"]).to.exist\r",
									"\r",
									"})\r",
									"\r",
									"pm.test('Resposta contém atributo \"message\"', () => {\r",
									"        pm.expect(response[\"message\"]).to.exist\r",
									"\r",
									"})\r",
									"\r",
									"//Validação de atributos (conteúdo)\r",
									"\r",
									"pm.test('Resposta correta retrona', () => {\r",
									"        pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
									"\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const baseURL = pm.environment.get('baseURL');\r",
									"const nome = pm.variables.replaceIn('{{$randomFristName}}');\r",
									"const email = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"const password = \"teste\"\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${baseURL}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"mone\": nome,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, (err,res) => {\r",
									"    console.log(err ? err : res.json());\r",
									"\r",
									"    try {\r",
									"        pm.environment.set('email_usuario',email)\r",
									"    }\r",
									"        catch {\r",
									"            console.warn('FAIL')\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/usuarios"
					},
					"response": []
				},
				{
					"name": "Realizar login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"\r",
									"pm.environment.set(\"token\", response.authorization.slice(7));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailValido}}\",\r\n    \"password\": \"{{senhaValida}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Cadastrar produto",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"const url = pm.environment.get('baseURL')\r",
									"\r",
									"\r",
									"const postrequest = {\r",
									"    url: `${url}/login`, //variável\r",
									"    method: 'post',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"email\": \"Fulano da Silva\",\r",
									"            \"password\": \"fulano@qa.com\"\r",
									"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postrequest, (err, response) => {\r",
									"    console.log(err ? err: response.json());\r",
									"\r",
									"    try {\r",
									"        // operação\r",
									"        pm.environment.set('token',response.json().authorization.slice(7))\r",
									"        console.log(response.json().authorization.slice(7))\r",
									"\r",
									"        \r",
									"        } catch {\r",
									"            //operação\r",
									"            console.warn('FAIL')\r",
									"\r",
									"        }\r",
									"    \r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": 10,\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": 15\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/produtos"
					},
					"response": []
				},
				{
					"name": "Cadastrar carrinho",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "DJI4CF60atislPyR",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"K6leHdftCeOJj8BJ\",\r\n       \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/carrinhos"
					},
					"response": []
				},
				{
					"name": "Excluir carrinho (cancelar compra)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{token}}"
							}
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "DJI4CF60atislPyR",
								"type": "text"
							}
						],
						"url": "{{baseURL}}/carrinhos/cancelar-compra"
					},
					"response": []
				}
			]
		},
		{
			"name": "Regressão Fluxo de Login",
			"item": [
				{
					"name": "Login senha errada Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailValido}}\",\r\n    \"password\": \"{{senhaErrada}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Login email errado Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailErrado}}\",\r\n    \"password\": \"{{senhaValida}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Login email  vazio Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailVazio}}\",\r\n    \"password\": \"{{senhaValida}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				},
				{
					"name": "Login senha  vazia Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"{{emailValido}}\",\r\n    \"password\": \"{{senhaVazia}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/login"
					},
					"response": []
				}
			]
		},
		{
			"name": "Regressão Fluxo de Usuários",
			"item": [
				{
					"name": "Informações de usuários",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": "{{baseURL}}/usuarios"
					},
					"response": []
				},
				{
					"name": "Cadastrar usuários Adm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"\r",
									"})\r",
									"\r",
									"// Validação de atributos (presença)\r",
									"const atributos = ['message', '_id']\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"   pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
									"        pm.expect(response[atributo]).to.exist\r",
									"    })\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const baseURL = pm.environment.get('baseURL');\r",
									"const nome = pm.variables.replaceIn('{{$randomFristName}}');\r",
									"const email = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"const password = \"teste\"\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${baseURL}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"mone\": nome,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, (err,res) => {\r",
									"    console.log(err ? err : res.json());\r",
									"\r",
									"    try {\r",
									"        pm.environment.set('email_usuario',email)\r",
									"    }\r",
									"        catch {\r",
									"            console.warn('FAIL')\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/usuarios"
					},
					"response": []
				},
				{
					"name": "Cadastrar usuários comum",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"//console.log(response)\r",
									"\r",
									"\r",
									"//pm.test(\"Status code is 201\", function () {\r",
									"    //pm.response.to.have.status(201);\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"   pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"//});\r",
									"\r",
									"// Validação de atributos (presença)\r",
									"//const atributos = ['message', '_id']\r",
									"\r",
									"//atributos.forEach((atributo) => {\r",
									"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
									"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
									" //   })\r",
									"\r",
									"//})\r",
									"\r",
									"//pm.test('Resposta contém atributo \"_id\"', () => {\r",
									"        //pm.expect(response[\"_id\"]).to.exist\r",
									"\r",
									"//})\r",
									"\r",
									"//pm.test('Resposta contém atributo \"message\"', () => {\r",
									"        //pm.expect(response[\"message\"]).to.exist\r",
									"\r",
									"//})\r",
									"\r",
									"//Validação de atributos (conteúdo)\r",
									"\r",
									"//pm.test('Resposta correta retrona', () => {\r",
									"        //pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
									"\r",
									"//})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const baseURL = pm.environment.get('baseURL');\r",
									"const nome = pm.variables.replaceIn('{{$randomFristName}}');\r",
									"const email = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"const password = \"teste\"\r",
									"\r",
									"const postRequest = {\r",
									"    url: `${baseURL}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"mone\": nome,\r",
									"            \"email\": email,\r",
									"            \"password\": password,\r",
									"            \"administrador\": \"false\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequest, (err,res) => {\r",
									"    console.log(err ? err : res.json());\r",
									"\r",
									"    try {\r",
									"        pm.environment.set('email_usuario',email)\r",
									"    }\r",
									"        catch {\r",
									"            console.warn('FAIL')\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/usuarios"
					},
					"response": []
				},
				{
					"name": "Delete usuários",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//const response = pm.response.json()\r",
									"//console.log(response)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"//pm.test(\"Body matches string\", function () {\r",
									"   //pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"//});\r",
									"//});\r",
									"\r",
									"// Validação de atributos (presença)\r",
									"//const atributos = ['message', '_id']\r",
									"\r",
									"//atributos.forEach((atributo) => {\r",
									"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
									"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
									" //   })\r",
									"\r",
									"//})\r",
									"\r",
									"//pm.test('Resposta contém atributo \"_id\"', () => {\r",
									"        //pm.expect(response[\"_id\"]).to.exist\r",
									"\r",
									"//})\r",
									"\r",
									"//pm.test('Resposta contém atributo \"message\"', () => {\r",
									"        //pm.expect(response[\"message\"]).to.exist\r",
									"\r",
									"//})\r",
									"\r",
									"//Validação de atributos (conteúdo)\r",
									"\r",
									"//pm.test('Resposta correta retrona', () => {\r",
									"        //pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
									"\r",
									"//})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/usuarios/0uxuPY0cbmQhpEz1"
					},
					"response": []
				},
				{
					"name": "Informações de usuários _Id errado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/usuarios/0uxuPY0cbmQhp123"
					},
					"response": []
				},
				{
					"name": "Email já cadastrado",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"//pm.test(\"Body matches string\", function () {\r",
									"   //pm.expect(pm.response.text()).to.include(\"este email já está sendo usado\");\r",
									"//});\r",
									"});\r",
									"\r",
									"// Validação de atributos (presença)\r",
									"//const atributos = ['message', '_id']\r",
									"\r",
									"//atributos.forEach((atributo) => {\r",
									"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
									"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
									" //   })\r",
									"\r",
									"//})\r",
									"\r",
									"//pm.test('Resposta contém atributo \"_id\"', () => {\r",
									"        //pm.expect(response[\"_id\"]).to.exist\r",
									"\r",
									"//})\r",
									"\r",
									"//pm.test('Resposta contém atributo \"message\"', () => {\r",
									"        //pm.expect(response[\"message\"]).to.exist\r",
									"\r",
									"//})\r",
									"\r",
									"//Validação de atributos (conteúdo)\r",
									"\r",
									"//pm.test('Resposta correta retrona', () => {\r",
									"        //pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
									"\r",
									"//})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Fulano da Silva\",\r\n  \"email\": \"fulano@qa.com\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/usuarios"
					},
					"response": []
				},
				{
					"name": "Email em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"//pm.test(\"Body matches string\", function () {\r",
									"   //pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"//});\r",
									"});\r",
									"\r",
									"// Validação de atributos (presença)\r",
									"//const atributos = ['message', '_id']\r",
									"\r",
									"//atributos.forEach((atributo) => {\r",
									"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
									"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
									" //   })\r",
									"\r",
									"//})\r",
									"\r",
									"//pm.test('Resposta contém atributo \"_id\"', () => {\r",
									"        //pm.expect(response[\"_id\"]).to.exist\r",
									"\r",
									"//})\r",
									"\r",
									"//pm.test('Resposta contém atributo \"message\"', () => {\r",
									"        //pm.expect(response[\"message\"]).to.exist\r",
									"\r",
									"//})\r",
									"\r",
									"//Validação de atributos (conteúdo)\r",
									"\r",
									"//pm.test('Resposta correta retrona', () => {\r",
									"        //pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
									"\r",
									"//})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Fulano da Silva\",\r\n  \"email\": \"\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/usuarios"
					},
					"response": []
				},
				{
					"name": "Nome em branco",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json()\r",
									"console.log(response)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"\r",
									"//pm.test(\"Body matches string\", function () {\r",
									"   //pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});\r",
									"\r",
									"// Validação de atributos (presença)\r",
									"//const atributos = ['message', '_id']\r",
									"\r",
									"//atributos.forEach((atributo) => {\r",
									"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
									"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
									" //   })\r",
									"\r",
									"//})\r",
									"\r",
									"//pm.test('Resposta contém atributo \"_id\"', () => {\r",
									"       // pm.expect(response[\"_id\"]).to.exist\r",
									"\r",
									"//})\r",
									"\r",
									"//        pm.expect(response[\"message\"]).to.exist\r",
									"\r",
									"//})\r",
									"\r",
									"//Validação de atributos (conteúdo)\r",
									"\r",
									"//pm.test('Resposta correta retrona', () => {\r",
									"       // pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
									"\r",
									"//})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"fulano@qa.com\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/usuarios"
					},
					"response": []
				},
				{
					"name": "Delete usuários C/ carrinho",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//const response = pm.response.json()\r",
									"//console.log(response)\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"pm.response.to.have.status(200);\r",
									"})\r",
									"//pm.test(\"Body matches string\", function () {\r",
									"   //pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"//});\r",
									"//});\r",
									"\r",
									"// Validação de atributos (presença)\r",
									"//const atributos = ['message', '_id']\r",
									"\r",
									"//atributos.forEach((atributo) => {\r",
									"   //pm.test('Resposta contém atributo \"${atributo}\"'), () => {\r",
									"        //pm.expect(pm.response.json()[atributo]).to.exist\r",
									" //   })\r",
									"\r",
									"//})\r",
									"\r",
									"//pm.test('Resposta contém atributo \"_id\"', () => {\r",
									"        //pm.expect(response[\"_id\"]).to.exist\r",
									"\r",
									"//})\r",
									"\r",
									"//pm.test('Resposta contém atributo \"message\"', () => {\r",
									"        //pm.expect(response[\"message\"]).to.exist\r",
									"\r",
									"//})\r",
									"\r",
									"//Validação de atributos (conteúdo)\r",
									"\r",
									"//pm.test('Resposta correta retrona', () => {\r",
									"        //pm.expect(response.message).have.string('Cadastro realizado com sucesso')\r",
									"\r",
									"//})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/usuarios/0uxuPY0cbmQhpEz1"
					},
					"response": []
				}
			]
		}
	]
}